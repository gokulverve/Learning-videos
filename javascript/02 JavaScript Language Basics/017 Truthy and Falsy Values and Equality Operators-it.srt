1
00:00:01,282 --> 00:00:03,705
Jonas: Prima di passare al nostro

2
00:00:03,705 --> 00:00:06,003
prossimo grande argomento, dobbiamo imparare rapidamente

3
00:00:06,003 --> 00:00:08,553
qualcosa chiamato valori di verit e falsi.

4
00:00:08,553 --> 00:00:11,718
Quindi in JavaScript, un valore di falsy  un

5
00:00:11,718 --> 00:00:14,210
valore che  considerato falso quando valutato

6
00:00:14,210 --> 00:00:16,878
in una condizione di istruzione if / else.

7
00:00:16,878 --> 00:00:19,114
E i valori falsy in JavaScript sono indefiniti, nulli,

8
00:00:19,114 --> 00:00:19,947
zero, stringhe vuote

9
00:00:19,947 --> 00:00:20,780
e valori "non numerici".

10
00:00:25,467 --> 00:00:28,961
Lascia che ti scriva davvero per te, okay.

11
00:00:28,961 --> 00:00:30,519
Quindi i valori

12
00:00:30,519 --> 00:00:31,852
falsy, sono

13
00:00:33,491 --> 00:00:35,324
indefiniti, nulli, zero,

14
00:00:37,466 --> 00:00:40,729
stringhe vuote e non un numero.

15
00:00:40,729 --> 00:00:42,409
Non abbiamo ancora parlato di questo

16
00:00:42,409 --> 00:00:45,191
qui, ma vedrete esempi di questo qui pi avanti nel corso.

17
00:00:45,191 --> 00:00:47,855
Ok, quindi tutti questi cinque valori diversi

18
00:00:47,855 --> 00:00:50,520
qui saranno convertiti in falso se valutati

19
00:00:50,520 --> 00:00:52,758
in una condizione vero / falso.

20
00:00:52,758 --> 00:00:54,940
Ecco perch li chiamiamo falsi.

21
00:00:54,940 --> 00:00:56,112
Non sono esattamente

22
00:00:56,112 --> 00:00:58,972
falsi, ma si riveleranno falsi se valutati in

23
00:00:58,972 --> 00:01:00,654
una condizione if / else.

24
00:01:00,654 --> 00:01:03,321
Ora abbiamo anche valori di verit.

25
00:01:06,413 --> 00:01:08,087
E, naturalmente, i valori di verit

26
00:01:08,087 --> 00:01:10,414
sono tutti i valori che sono considerati veri

27
00:01:10,414 --> 00:01:13,592
quando vengono valutati in una condizione di istruzione if / else.

28
00:01:13,592 --> 00:01:18,092
Quindi, in pratica, sono tutti i valori che non sono falsi.

29
00:01:19,661 --> 00:01:22,007
Ok, quindi diamo un'occhiata a

30
00:01:22,007 --> 00:01:24,590
un esempio per dimostrare come funziona.

31
00:01:25,461 --> 00:01:28,091
Definiamo una variabile di altezza, diciamo.

32
00:01:28,091 --> 00:01:29,823
E in realt non lo definiremo,

33
00:01:29,823 --> 00:01:31,351
quindi lo dichiariamo solo qui.

34
00:01:31,351 --> 00:01:34,339
E ora scriviamo una dichiarazione if / else.

35
00:01:34,339 --> 00:01:36,339
Quindi possiamo dire se altezza,

36
00:01:39,569 --> 00:01:41,902
e quindi accedere alla console.

37
00:01:45,196 --> 00:01:47,860
La variabile  definita. La variabile non 

38
00:01:47,860 --> 00:01:48,777
E altro stata definita. Quindi, vediamo cosa succede qui.

39
00:01:54,442 --> 00:01:57,359
E ci che viene stampato qui, 

40
00:02:00,191 --> 00:02:02,967
che la variabile non  stata definita.

41
00:02:02,967 --> 00:02:04,590
Allora perch sta succedendo?

42
00:02:04,590 --> 00:02:06,902
Bene, abbiamo dichiarato la variabile come

43
00:02:06,902 --> 00:02:08,712
altezza, ma non l'abbiamo definita.

44
00:02:08,712 --> 00:02:11,951
Quindi sai gi che ora  indefinito.

45
00:02:11,951 --> 00:02:13,577
E sappiamo anche che un indefinito  un valore falsato, giusto?

46
00:02:13,577 --> 00:02:16,054
Quindi qui quando diciamo se

47
00:02:16,054 --> 00:02:20,013
altezza, questa altezza qui viene convertita in falsa.

48
00:02:20,013 --> 00:02:22,493
Quindi, quindi, abbiamo inserito il blocco

49
00:02:22,493 --> 00:02:25,414
else, che stamper quindi che la variabile

50
00:02:25,414 --> 00:02:27,620
non  stata ancora definita.

51
00:02:27,620 --> 00:02:29,573
Questo  un modo molto pratico di testare se

52
00:02:29,573 --> 00:02:31,322
una variabile  stata effettivamente definita o meno.

53
00:02:31,322 --> 00:02:33,096
Ora diciamo che in realt definiamo un valore. Quindi guarda

54
00:02:33,096 --> 00:02:36,734
Quindi diciamo 23. cosa succede ora? Ovviamente, la variabile  ora definita.

55
00:02:36,734 --> 00:02:40,240
Questo perch tutto ci che non  un valore falso 

56
00:02:40,240 --> 00:02:41,740
un valore di verit.

57
00:02:42,640 --> 00:02:45,271
Sappiamo gi che quando esiste una variabile, beh

58
00:02:45,271 --> 00:02:48,531
allora questo qui sar convertito in vero, e quindi, se

59
00:02:48,531 --> 00:02:49,976
il blocco  inserito.

60
00:02:49,976 --> 00:02:53,058
Quindi, ancora un modo molto pratico di

61
00:02:53,058 --> 00:02:55,900
testare se una variabile esiste realmente.

62
00:02:55,900 --> 00:02:58,602
Ora c' solo una cosa da Si noti come questo zero abbia anche un

63
00:02:58,602 --> 00:03:01,532
tenere a mente qui, e basta. valore di falsy, ma l'altezza pu ovviamente essere zero.

64
00:03:01,532 --> 00:03:04,856
Quindi mettiamolo a zero qui.

65
00:03:04,856 --> 00:03:06,887
La variabile  effettivamente definita ora non  vero?

66
00:03:06,887 --> 00:03:09,099
Quindi abbiamo un valore qui, non  indefinito.

67
00:03:09,099 --> 00:03:10,139
Ma se ora

68
00:03:10,139 --> 00:03:13,671
lo ricarichiamo, allora dice ancora che la variabile non  stata definita.

69
00:03:13,671 --> 00:03:15,593
Questa , ovviamente, una situazione che vogliamo evitare.

70
00:03:15,593 --> 00:03:16,982
Quindi questo qui non pu

71
00:03:16,982 --> 00:03:19,623
essere solo altezza, ma dobbiamo anche dire che se la

72
00:03:19,623 --> 00:03:21,773
variabile  zero, allora anche la variabile  definita.

73
00:03:21,773 --> 00:03:24,985
Ricorda che possiamo usare l'operatore

74
00:03:24,985 --> 00:03:27,835
o per fare esattamente questo.

75
00:03:27,835 --> 00:03:31,000
Quindi abbiamo gi usato l'operatore e prima,

76
00:03:31,000 --> 00:03:33,940
ma abbiamo anche parlato dell'operatore o.

77
00:03:33,940 --> 00:03:36,717
Quindi possiamo dire,

78
00:03:36,717 --> 00:03:40,024
o l'altezza 

79
00:03:40,024 --> 00:03:42,464
uguale a

80
00:03:42,464 --> 00:03:43,654
zero.

81
00:03:43,654 --> 00:03:45,980
In modo che risolver il problema.

82
00:03:45,980 --> 00:03:48,503
Questo  un modello abbastanza comune in JavaScript, per verificare se

83
00:03:48,503 --> 00:03:49,422
una variabile  definita.

84
00:03:49,422 --> 00:03:50,255
Quindi controlliamo se la

85
00:03:51,198 --> 00:03:52,956
variabile esiste o se  uguale a zero.

86
00:03:52,956 --> 00:03:54,123
Quindi il blocco if viene inserito di fatto.

87
00:03:54,972 --> 00:03:56,738
Ok, quindi controlliamolo di nuovo,

88
00:03:56,738 --> 00:03:59,585
e cos ora vediamo che la variabile  definita.

89
00:03:59,585 --> 00:04:01,825
Ricorda che solo uno di questi qui deve

90
00:04:01,825 --> 00:04:03,978
essere vero affinch l'intera condizione sia vera.

91
00:04:03,978 --> 00:04:05,755
Quindi in questo caso ora l'altezza

92
00:04:05,755 --> 00:04:08,981
 zero e quindi questo qui verr convertito in falso.

93
00:04:08,981 --> 00:04:10,773
Ma non abbiamo altezza

94
00:04:10,773 --> 00:04:13,770
uguale a zero, il che  vero,

95
00:04:13,770 --> 00:04:16,886
naturalmente, perch in questa situazione l'altezza  zero.

96
00:04:16,886 --> 00:04:19,896
Quindi abbiamo il falso e il

97
00:04:19,896 --> 00:04:22,703
vero, il che risulter vero.

98
00:04:22,703 --> 00:04:25,701
Pertanto, questa riga di codice qui viene quindi eseguita.

99
00:04:25,701 --> 00:04:28,391
Bene, ora funzioner con qualsiasi numero qui e

100
00:04:28,391 --> 00:04:29,737
anche con le stringhe.

101
00:04:29,737 --> 00:04:31,878
Quindi diciamo 20, per esempio.

102
00:04:31,878 --> 00:04:33,984
E vedi che  ancora vero, perch

103
00:04:33,984 --> 00:04:35,826
 ancora entrato in quel primo blocco.

104
00:04:35,826 --> 00:04:38,965
Ma se abbiamo una stringa vuota, ricorda che anche

105
00:04:38,965 --> 00:04:41,727
questo  un valore falsato come vediamo qui.

106
00:04:41,727 --> 00:04:43,560
Quindi con una stringa vuota ora

107
00:04:44,968 --> 00:04:47,385
dice che la variabile non  stata ancora definita.

108
00:04:49,457 --> 00:04:50,756
Quindi, questo tipo di ha senso, giusto?

109
00:04:50,756 --> 00:04:52,601
Perch in effetti, non c' davvero qualcosa l,

110
00:04:52,601 --> 00:04:54,171
 proprio come una stringa vuota.

111
00:04:54,171 --> 00:04:56,628
Quindi questi sono valori di falsit

112
00:04:56,628 --> 00:05:00,014
e verit, e il modo pratico per verificare se

113
00:05:00,014 --> 00:05:02,037
una variabile  effettivamente definita.

114
00:05:02,037 --> 00:05:04,095
Ora, per finire, parliamo dei

115
00:05:04,095 --> 00:05:06,238
due diversi operatori di uguaglianza.

116
00:05:06,238 --> 00:05:08,041
Quindi abbiamo sempre usato questo operatore triplo uguale, giusto?

117
00:05:08,041 --> 00:05:11,076
Questo  quello per i paragoni rigorosi di uguaglianza.

118
00:05:11,076 --> 00:05:12,707
Ma c' anche E la differenza  che questo

119
00:05:12,707 --> 00:05:15,557
l'uguale, uguale, quindi questo operatore qui. tipo di coercizione, che significa che i tipi di dati

120
00:05:15,557 --> 00:05:17,407
di entrambe le variabili non devono corrispondere.

121
00:05:17,407 --> 00:05:19,565
Lascia che te lo mostri, in pratica.

122
00:05:19,565 --> 00:05:23,506
Quindi, solo per commentare qui, e

123
00:05:23,506 --> 00:05:26,495
ora diciamo se altezza Quindi abbiamo una

124
00:05:26,495 --> 00:05:28,945
 uguale a 23. stringa ora qui. Quindi colleghiamo semplicemente alla console, fa tipo

125
00:05:28,945 --> 00:05:30,745
l'operatore uguale uguale. coercizione. Diamo un'occhiata a quello che  successo.

126
00:05:30,745 --> 00:05:33,542
Prima di farlo, riportiamo questo qui a 23.

127
00:05:33,542 --> 00:05:35,256
Quello che stiamo facendo

128
00:05:35,256 --> 00:05:39,193
qui,  di confrontare l'altezza che  23, un

129
00:05:39,193 --> 00:05:43,026
numero con una stringa di 23, con un operatore

130
00:05:44,643 --> 00:05:47,315
di uguaglianza non rigorosa, che  questo.

131
00:05:47,315 --> 00:05:48,148
Quindi solo due uguali.

132
00:05:51,050 --> 00:05:52,050
Diamo un'occhiata a questo.

133
00:05:53,265 --> 00:05:55,553
E cos vedi che questo in realt

134
00:05:55,553 --> 00:05:58,636
risulta vero, quindi entriamo in questo primo se blocco.

135
00:06:00,537 --> 00:06:02,787
Quindi, vedete, l'operatore uguale alla pari esegue la coercizione.

136
00:06:05,360 --> 00:06:07,276
Ci significa che JavaScript, quando usiamo

137
00:06:07,276 --> 00:06:09,562
questo operatore qui, converte la stringa di

138
00:06:09,562 --> 00:06:13,047
23 in un numero, e poi dice che  lo stesso

139
00:06:13,047 --> 00:06:14,511
di 23, il numero.

140
00:06:14,511 --> 00:06:16,499
Diamo un'occhiata a questo qui di nuovo.

141
00:06:16,499 --> 00:06:19,172
Quindi, 23 e poi la stringa 23.

142
00:06:19,172 --> 00:06:22,920
E dir che  vero.

143
00:06:22,920 --> 00:06:25,313
 esattamente ci che abbiamo osservato qui.

144
00:06:25,313 --> 00:06:27,307
Quindi, ancora una volta,

145
00:06:27,307 --> 00:06:30,831
JavaScript digita la coercizione, che in pratica

146
00:06:30,831 --> 00:06:33,222
significa convertire questa stringa in

147
00:06:33,222 --> 00:06:36,851
un numero, quindi confrontare i numeri e,

148
00:06:36,851 --> 00:06:38,940
ovviamente, sono uguali, giusto?

149
00:06:38,940 --> 00:06:40,790
Ora se invece usiamo l'operatore

150
00:06:40,790 --> 00:06:43,864
di uguaglianza rigorosa con i tre segni di

151
00:06:43,864 --> 00:06:47,351
uguale, beh allora non far tipo di coercizione.

152
00:06:47,351 --> 00:06:49,541
Quindi, quindi, cosa pensi che succeder ora?

153
00:06:49,541 --> 00:06:52,463
S, ora dice che  falso,

154
00:06:52,463 --> 00:06:55,594
perch in realt sono due cose diverse.

155
00:06:55,594 --> 00:06:58,402
Quindi abbiamo 23 il numero e 23 la stringa.

156
00:06:58,402 --> 00:07:00,422
E sono cose diverse, quindi, in realt,

157
00:07:00,422 --> 00:07:02,209
vogliamo che non siano gli stessi, okay.

158
00:07:02,209 --> 00:07:04,192
E quindi se invece avessimo qui tre

159
00:07:04,192 --> 00:07:06,358
uguali, allora ovviamente non vedremo questo operativo.

160
00:07:06,358 --> 00:07:08,718
Non vedremo questo registro nella console perch  falso.

161
00:07:08,718 --> 00:07:11,358
Ok, ecco come funziona l'operatore di uguaglianza

162
00:07:11,358 --> 00:07:12,946
rigorosa, ed  assolutamente

163
00:07:12,946 --> 00:07:15,352
una buona pratica usare sempre il triplo

164
00:07:15,352 --> 00:07:18,249
uguale, quindi l'operatore di uguaglianza rigorosa, al fine

165
00:07:18,249 --> 00:07:20,532
di evitare situazioni e bug inaspettati.

166
00:07:20,532 --> 00:07:23,023
Ecco perch uso questo operatore tutto il tempo, con

167
00:07:23,023 --> 00:07:25,614
i tre uguali, e non solo i due uguali.

168
00:07:25,614 --> 00:07:26,991
&nbsp;

169
00:07:26,991 --> 00:07:30,382
&nbsp;

170
00:07:30,382 --> 00:07:33,749
&nbsp;

171
00:07:33,749 --> 00:07:36,970
&nbsp;

172
00:07:36,970 --> 00:07:40,494
&nbsp;

173
00:07:40,494 --> 00:07:44,782
&nbsp;

174
00:07:44,782 --> 00:07:46,477
&nbsp;

175
00:07:46,477 --> 00:07:48,489
&nbsp;

176
00:07:48,489 --> 00:07:50,421
&nbsp;

177
00:07:50,421 --> 00:07:53,953
&nbsp;

178
00:07:53,953 --> 00:07:56,517
&nbsp;

179
00:07:56,517 --> 00:08:00,850
&nbsp;

