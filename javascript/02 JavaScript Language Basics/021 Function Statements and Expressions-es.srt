1
00:00:01,399 --> 00:00:02,340
Instructor: en

2
00:00:02,340 --> 00:00:05,940
este video aprender sobre declaraciones y expresiones de funciones.

3
00:00:05,940 --> 00:00:07,780
Entonces, en el ltimo video en

4
00:00:07,780 --> 00:00:10,620
el que hablamos por primera vez de las funciones,

5
00:00:10,620 --> 00:00:13,360
siempre declaraba funciones usando declaraciones de funciones, pero en

6
00:00:13,360 --> 00:00:16,190
realidad hay otra forma de escribir funciones en Java

7
00:00:16,190 --> 00:00:19,870
Script, y eso es mediante el uso de expresiones de funciones, est bien.

8
00:00:19,870 --> 00:00:22,000
Entonces, toda la lgica de las funciones que les

9
00:00:22,000 --> 00:00:24,760
expliqu en la ltima conferencia todava funcionan de la misma manera.

10
00:00:24,760 --> 00:00:27,820
Simplemente escribimos la funcin de una manera ligeramente diferente, y bajo

11
00:00:27,820 --> 00:00:29,220
el cap de Java Script

12
00:00:29,220 --> 00:00:31,520
tambin funciona de manera bastante diferente en realidad,

13
00:00:31,520 --> 00:00:34,230
pero por ahora eso no es importante para nosotros.

14
00:00:34,230 --> 00:00:36,033
Solo quiero que sepas en

15
00:00:36,033 --> 00:00:38,280
este punto que tenemos declaraciones de

16
00:00:38,280 --> 00:00:40,650
funciones y expresiones, as que djame mostrrtelo.

17
00:00:40,650 --> 00:00:43,590
Entonces, cuando escribimos una expresin de funcin, comenzamos escribiendo

18
00:00:43,590 --> 00:00:46,180
la funcin bsicamente sin el nombre, as que

19
00:00:46,180 --> 00:00:48,060
todava usamos la palabra clave de

20
00:00:48,060 --> 00:00:49,980
la funcin y luego de eso

21
00:00:49,980 --> 00:00:52,340
ponemos la lista de argumentos, y entonces

22
00:00:52,340 --> 00:00:56,183
este caso quiero pegarlo en el trabajo, ingrese el primer nombre.

23
00:00:57,030 --> 00:00:59,230
De acuerdo, y solo entonces bsicamente

24
00:00:59,230 --> 00:01:01,450
asignamos esta funcin a una variable.

25
00:01:01,450 --> 00:01:03,540
Entonces, declaramos una variable, y esta

26
00:01:03,540 --> 00:01:06,460
va a llamar "whatDoYouDo", as que bsicamente es una

27
00:01:06,460 --> 00:01:09,380
funcin en la que pegamos el trabajo y luego

28
00:01:09,380 --> 00:01:12,550
la funcin nos dice lo que hace esa persona.

29
00:01:12,550 --> 00:01:16,403
Entonces, "whatDoYouDo", entonces eso ahora es una variable, y lo

30
00:01:18,221 --> 00:01:21,720
que asignamos a esa variable es simplemente esta funcin.

31
00:01:21,720 --> 00:01:24,760
Entonces, funcin donde pegamos en trabajo y primer nombre,

32
00:01:24,760 --> 00:01:27,450
y luego, por supuesto, el bloque de funciones.

33
00:01:27,450 --> 00:01:29,350
Bien, comparando eso con lo

34
00:01:29,350 --> 00:01:31,850
que tenamos antes, bien, escribmoslo aqu.

35
00:01:33,100 --> 00:01:36,823
Entonces, esa es una expresin de funcin.

36
00:01:39,350 --> 00:01:42,290
Y si hiciramos lo mismo que

37
00:01:43,740 --> 00:01:47,907
una declaracin de funcin, escribiramos "Funcin que DoYouDo"

38
00:01:49,530 --> 00:01:53,700
y luego la lista de argumentos, algo as.

39
00:01:53,700 --> 00:01:55,300
De acuerdo, entonces ves la diferencia?

40
00:01:56,140 --> 00:01:58,110
De acuerdo, djame comentar esto aqu.

41
00:02:00,440 --> 00:02:02,340
Entonces, para que sepas cul es la

42
00:02:02,340 --> 00:02:04,880
diferencia entre una declaracin y una expresin, y de nuevo,

43
00:02:04,880 --> 00:02:07,504
la forma en que llamamos a la funcin y la

44
00:02:07,504 --> 00:02:08,670
forma en que pegamos los

45
00:02:08,670 --> 00:02:11,060
parmetros y todo lo que aprendiste antes sigue funcionando

46
00:02:11,060 --> 00:02:13,330
exactamente De la misma manera con expresiones de funciones.

47
00:02:13,330 --> 00:02:16,620
Muy bien, as que a continuacin usar una declaracin

48
00:02:16,620 --> 00:02:18,860
de cambio aqu para que puedas

49
00:02:18,860 --> 00:02:22,640
practicar algunas cosas diferentes que aprendimos antes y haremos algo

50
00:02:22,640 --> 00:02:24,930
similar al cambio que tuvimos antes.

51
00:02:24,930 --> 00:02:27,790
Entonces, vamos a cambiar el trabajo aqu

52
00:02:27,790 --> 00:02:31,523
y luego nuestros diferentes casos sern para, digamos, profesor.

53
00:02:34,700 --> 00:02:36,700
Y agreguemos los casos aqu antes.

54
00:02:36,700 --> 00:02:39,923
Entonces, profesor de casos, entonces tenemos conductor. Y finalmente, el caso predeterminado, si ninguno

55
00:02:42,750 --> 00:02:45,160
Entonces tenemos diseador de los anteriores se aplica.

56
00:02:50,060 --> 00:02:52,439
Muy bien, ahora en el otro momento

57
00:02:52,439 --> 00:02:54,420
en el que hicimos este cambio

58
00:02:54,420 --> 00:02:56,880
similar tuvimos un registro anulado cancelado y

59
00:02:56,880 --> 00:03:00,295
luego un descanso, pero esta vez realmente vamos a devolver algo.

60
00:03:00,295 --> 00:03:01,490
Entonces, digamos que queremos devolver

61
00:03:01,490 --> 00:03:03,500
el primer nombre ms la cadena que tenamos antes.

62
00:03:03,500 --> 00:03:06,870
Por lo tanto, "ensea a los nios cmo codificar". "Est bien, y ahora

63
00:03:08,150 --> 00:03:10,510
no tendremos que

64
00:03:10,510 --> 00:03:15,160
incluir el descanso.

65
00:03:15,160 --> 00:03:17,250
Eso es debido a algo que

66
00:03:17,250 --> 00:03:19,120
no te dije antes, es

67
00:03:19,120 --> 00:03:20,520
cuando presionamos la palabra

68
00:03:20,520 --> 00:03:24,010
clave return aqu, luego devolvemos lo que definimos despus de

69
00:03:24,010 --> 00:03:27,810
ella, pero lo que tambin sucede es que la funcin termina inmediatamente.

70
00:03:27,810 --> 00:03:29,932
Entonces, bsicamente, salimos inmediatamente de la

71
00:03:29,932 --> 00:03:31,280
funcin y regresamos al

72
00:03:31,280 --> 00:03:33,430
lugar donde realmente llamamos a la funcin.

73
00:03:33,430 --> 00:03:35,460
De acuerdo, entonces las palabras clave de retorno no solo

74
00:03:35,460 --> 00:03:37,700
devuelven el valor, sino que tambin finalizan inmediatamente la funcin.

75
00:03:37,700 --> 00:03:41,250
Bien, entonces no necesitamos el descanso aqu.

76
00:03:41,250 --> 00:03:43,810
Entonces, en caso de que el trabajo

77
00:03:43,810 --> 00:03:46,430
sea maestro, devolvemos esta cadena aqu y

78
00:03:46,430 --> 00:03:48,810
luego salimos inmediatamente de la funcin.

79
00:03:48,810 --> 00:03:51,130
Est bien, ahora en caso de que el trabajo

80
00:03:51,130 --> 00:03:53,223
sea el conductor, bueno, entonces devolvemos algo ms.

81
00:03:55,718 --> 00:03:58,800
De acuerdo, entonces, en este caso, esta lnea aqu nunca

82
00:03:58,800 --> 00:04:00,600
se ejecutar, obviamente, por lo que

83
00:04:01,840 --> 00:04:04,520
no va a terminar la funcin y, en cambio,

84
00:04:04,520 --> 00:04:07,360
llegar al siguiente caso, que es el controlador.

85
00:04:07,360 --> 00:04:09,640
Entonces, primer nombre, y digamos, "maneja un taxi en Lisboa". "Entonces lo mismo "Disea hermosos sitios web" y, Hace algo

86
00:04:09,640 --> 00:04:11,890
para el diseador. finalmente, el caso predeterminado. mas De acuerdo, entonces vamos a intentarlo.

87
00:04:11,890 --> 00:04:16,890
Entonces, al igual que antes, llamamos a nuestra funcin "whatDoYouDo"

88
00:04:20,520 --> 00:04:22,640
y luego pegamos el trabajo y un nombre.

89
00:04:30,617 --> 00:04:32,670
Entonces, peguemos, "maestro", y por supuesto, "John". "Y no olvides que esta funcin aqu

90
00:04:32,670 --> 00:04:34,060
arroja algo, y entonces deberamos

91
00:04:41,840 --> 00:04:43,063
guardar eso en alguna parte".

92
00:04:44,660 --> 00:04:47,150
De acuerdo, o en lugar de

93
00:04:47,150 --> 00:04:50,990
guardarlo, tambin podemos simplemente iniciar sesin en la consola,

94
00:04:50,990 --> 00:04:53,560
as que hagmoslo en su lugar.

95
00:04:53,560 --> 00:04:58,560
De acuerdo, entonces eso es algo que no hicimos antes.

96
00:05:00,110 --> 00:05:02,260
Entonces, inmediatamente inicie sesin en

97
00:05:02,260 --> 00:05:05,800
la consola el resultado de llamar a esta funcin.

98
00:05:05,800 --> 00:05:07,830
De acuerdo, pero eso solo funciona igual.

99
00:05:07,830 --> 00:05:10,043
Entonces, en este caso, lo que volveremos aqu es la cadena, "John les ensea

100
00:05:11,168 --> 00:05:12,173
a los nios cmo codificar", verdad?

101
00:05:13,490 --> 00:05:15,860
Y entonces eso se registrar en la consola.

102
00:05:15,860 --> 00:05:17,570
Entonces, exactamente como dije,

103
00:05:17,570 --> 00:05:20,070
esta es la cadena que esperbamos, verdad?

104
00:05:20,070 --> 00:05:22,030
Y ahora, por supuesto, podemos hacer esto muchas veces. Bueno, podemos decir "Veamos qu pasa ahora,

105
00:05:22,030 --> 00:05:24,667
Entonces, digamos, "diseador, Jane" y luego. eso, "Mark est retirado. por lo que" Jane disea "sitios

106
00:05:24,667 --> 00:05:27,850
web hermosos", y luego Mark hace algo

107
00:05:27,850 --> 00:05:30,503
ms con la clusula predeterminada aqu.

108
00:05:32,010 --> 00:05:35,400
Entonces, de nuevo, ve lo til que es

109
00:05:35,400 --> 00:05:37,520
poder reutilizar todo este cdigo.

110
00:05:37,520 --> 00:05:40,633
De lo contrario, bsicamente tendramos que escribir esto aqu

111
00:05:43,230 --> 00:05:47,390
tres veces si quisiera tener este escenario con tres personas y

112
00:05:47,390 --> 00:05:49,597
tres trabajos diferentes.

113
00:05:51,280 --> 00:05:54,177
Y as simplemente pegamos a la funcin

114
00:05:54,177 --> 00:05:56,580
las cosas que cambian, bsicamente.

115
00:05:56,580 --> 00:05:58,450
Entonces, lo que es diferente aqu es

116
00:05:58,450 --> 00:06:00,640
el trabajo y el nombre de cada uno

117
00:06:00,640 --> 00:06:02,860
de estos casos, y eso es lo que

118
00:06:02,860 --> 00:06:05,430
pegamos en la funcin, tanto el trabajo como el nombre,

119
00:06:05,430 --> 00:06:08,140
y luego basamos en que la funcin hace algo, que

120
00:06:08,140 --> 00:06:10,570
en este caso produce un cadena y luego lo devuelve.

121
00:06:10,570 --> 00:06:12,843
Entonces, de nuevo, siempre podemos ver

122
00:06:12,843 --> 00:06:15,240
una funcin como una mquina que recibe

123
00:06:15,240 --> 00:06:17,350
algo, luego hace algo con los

124
00:06:17,350 --> 00:06:19,250
datos y devuelve algo diferente.

125
00:06:19,250 --> 00:06:21,050
De acuerdo, as es como escribimos una expresin de funcin.

126
00:06:21,050 --> 00:06:23,520
Ahora, declaraciones y expresiones, no solo se

127
00:06:23,520 --> 00:06:26,120
aplican a las funciones, sino que son un

128
00:06:26,120 --> 00:06:28,540
concepto global en Java Script, en realidad.

129
00:06:28,540 --> 00:06:31,240
Entonces, antes de continuar, hablemos un poco sobre la

130
00:06:31,240 --> 00:06:33,230
diferencia entre las declaraciones y las expresiones.

131
00:06:33,230 --> 00:06:34,720
Por lo tanto, las expresiones Java

132
00:06:34,720 --> 00:06:36,800
Script son piezas de cdigo que siempre producen

133
00:06:36,800 --> 00:06:40,360
un valor, y no importa cunto tiempo permanezcan, siempre que el cdigo genere un

134
00:06:40,360 --> 00:06:42,290
nico valor y luego sea una expresin.

135
00:06:42,290 --> 00:06:44,230
Entonces, echemos un vistazo a eso en la consola aqu.

136
00:06:44,230 --> 00:06:47,320
Y as, por ejemplo, si simplemente escribe, "2 +

137
00:06:47,320 --> 00:06:49,260
3", bueno, entonces ver que esto

138
00:06:49,260 --> 00:06:52,170
produce un resultado, entonces un 5 en este caso.

139
00:06:52,170 --> 00:06:54,820
Y entonces, lo que acabamos de escribir

140
00:06:54,820 --> 00:06:57,650
aqu en una expresin Java Script, de acuerdo?

141
00:06:57,650 --> 00:07:00,170
Y lo mismo ocurre cuando, por ejemplo, llamamos a esta funcin.

142
00:07:00,170 --> 00:07:03,470
Entonces, llamemos a esta funcin aqu mismo

143
00:07:03,470 --> 00:07:06,090
en la consola, y de

144
00:07:06,090 --> 00:07:10,830
hecho tenemos acceso a estas funciones aqu en la consola.

145
00:07:10,830 --> 00:07:13,070
Bueno, eso es algo que no hicimos hasta

146
00:07:13,070 --> 00:07:15,000
este punto, bsicamente usando las variables y

147
00:07:15,000 --> 00:07:17,114
la funcin que definimos nuestro cdigo interno directamente

148
00:07:17,114 --> 00:07:18,940
en nuestra consola, pero podemos hacer eso.

149
00:07:18,940 --> 00:07:22,780
Est bien, y entonces cuando ahora llamamos a esta funcin aqu, entonces ves que, por supuesto, devuelve

150
00:07:22,780 --> 00:07:24,839
un valor, y entonces, de nuevo, esta llamada a

151
00:07:24,839 --> 00:07:26,350
la funcin aqu es una expresin.

152
00:07:26,350 --> 00:07:28,830
Y realmente, todo lo que hacemos, una vez

153
00:07:28,830 --> 00:07:31,247
ms, que produce un resultado es una expresin.

154
00:07:31,247 --> 00:07:33,370
Entonces, por ejemplo, "typeof 23", y nos

155
00:07:33,370 --> 00:07:35,680
devuelve este resultado de "number", y as

156
00:07:35,680 --> 00:07:37,430
nuevamente, esta es una expresin.

157
00:07:38,354 --> 00:07:40,370
De acuerdo, entonces lo que esto

158
00:07:40,370 --> 00:07:43,493
significa es que cada vez que Java Script espera un

159
00:07:44,422 --> 00:07:46,500
valor, siempre tenemos que escribir una expresin.

160
00:07:46,500 --> 00:07:47,820
De acuerdo, y la

161
00:07:47,820 --> 00:07:51,220
importancia de todo este concepto puede ser un poco difcil de

162
00:07:51,220 --> 00:07:55,120
comprender en este punto para ti, est bien, pero es realmente importante

163
00:07:55,120 --> 00:07:57,819
aprender estas cosas para el futuro, est bien? Por ejemplo, aqu Java Script espera un valor aqu, por

164
00:07:57,819 --> 00:07:59,060
Entonces, por ejemplo, aqu en esta declaracin FL. lo que debe ser

165
00:07:59,060 --> 00:08:01,270
una expresin, y por supuesto es porque este

166
00:08:01,270 --> 00:08:03,360
operador aqu, por supuesto, devolver verdadero o

167
00:08:03,360 --> 00:08:05,260
falso, y eso es un resultado y,

168
00:08:06,197 --> 00:08:07,890
por lo tanto, Es una expresin.

169
00:08:07,890 --> 00:08:10,390
Bien, ahora de todos modos,

170
00:08:10,390 --> 00:08:12,740
sobre declaraciones, simplemente realizan acciones.

171
00:08:12,740 --> 00:08:15,680
Entonces, hacen cosas pero no producen resultados inmediatos, por

172
00:08:15,680 --> 00:08:18,420
lo que estas son cosas como declaraciones FL,

173
00:08:19,640 --> 00:08:22,490
un ciclo de por qu de lo que hablaremos

174
00:08:22,490 --> 00:08:24,920
ms adelante, o incluso una declaracin de funcin.

175
00:08:24,920 --> 00:08:27,230
No producen ningn valor inmediato, por

176
00:08:27,230 --> 00:08:28,990
lo que se llaman declaraciones.

177
00:08:28,990 --> 00:08:31,210
Entonces, volvamos a echar un vistazo a eso aqu en la consola.

178
00:08:31,210 --> 00:08:33,060
Voy a escribir una declaracin FL muy simple aqu.

179
00:08:35,561 --> 00:08:37,480
Por lo tanto, digamos "si es verdadero", y por

180
00:08:37,480 --> 00:08:39,340
lo tanto, si este bloque se ingresar, por supuesto.

181
00:08:39,340 --> 00:08:41,360
Entonces, vamos a escribir la consola. inicie sesin aqu de

182
00:08:41,360 --> 00:08:45,510
solo algunos nmeros, algunas cosas al azar.

183
00:08:45,510 --> 00:08:47,620
Por lo tanto, realmente no importa aqu, as

184
00:08:47,620 --> 00:08:49,490
que vamos a golpear return, y ahora ves

185
00:08:49,490 --> 00:08:51,730
que lo que esto vuelve aqu no est definido.

186
00:08:51,730 --> 00:08:53,720
De acuerdo, entonces realmente no devuelve nada,

187
00:08:53,720 --> 00:08:56,160
pero este 23 aqu simplemente viene de esta consola. regstrese aqu, pero la declaracin

188
00:08:56,160 --> 00:08:58,830
en s misma, no devuelve nada.

189
00:08:58,830 --> 00:09:01,900
Entonces, es realmente esta afirmacin la que no produce un resultado,

190
00:09:01,900 --> 00:09:03,993
y esa es la diferencia entre expresiones

191
00:09:05,220 --> 00:09:07,740
y enunciados, est bien?

192
00:09:07,740 --> 00:09:10,260
Entonces, volviendo a las funciones aqu, aprendimos que las

193
00:09:10,260 --> 00:09:11,870
expresiones de funcin producen un resultado

194
00:09:11,870 --> 00:09:14,824
inmediato, mientras que las declaraciones de funcin no lo hacen.

195
00:09:14,824 --> 00:09:16,874
Y esto realmente ser muy importante para

196
00:09:18,060 --> 00:09:19,693
ciertas situaciones sobre las que aprenders

197
00:09:19,693 --> 00:09:22,340
ms adelante en el curso.

198
00:09:22,340 --> 00:09:25,760
Por lo tanto, en estas dos conferencias cubrimos los conceptos muy,

199
00:09:25,760 --> 00:09:28,090
muy bsicos de las funciones, pero, por

200
00:09:28,090 --> 00:09:30,980
supuesto, hay mucho ms que aprender sobre las funciones.

201
00:09:30,980 --> 00:09:34,130
Pero nuevamente, lo dejar un poco ms adelante en el curso, de

202
00:09:34,130 --> 00:09:36,050
modo que ahora estamos listos para pasar

203
00:09:36,050 --> 00:09:38,300
a otro tema enorme y emocionante, es decir, borrar.

204
00:09:38,300 --> 00:09:41,660
&nbsp;

205
00:09:41,660 --> 00:09:43,740
&nbsp;

206
00:09:43,740 --> 00:09:46,293
&nbsp;

207
00:09:46,293 --> 00:09:47,410
&nbsp;

208
00:09:47,410 --> 00:09:49,410
&nbsp;

209
00:09:49,410 --> 00:09:51,530
&nbsp;

210
00:09:51,530 --> 00:09:54,240
&nbsp;

211
00:09:54,240 --> 00:09:56,670
&nbsp;

212
00:09:56,670 --> 00:09:58,880
&nbsp;

213
00:09:58,880 --> 00:10:02,623
&nbsp;

