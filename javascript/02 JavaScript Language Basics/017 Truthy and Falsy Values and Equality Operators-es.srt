1
00:00:01,282 --> 00:00:03,705
Jonas: Antes de pasar a nuestro prximo

2
00:00:03,705 --> 00:00:06,003
gran tema, necesitamos aprender rpidamente sobre algo

3
00:00:06,003 --> 00:00:08,553
que se llama valores de falsedad y falsedad.

4
00:00:08,553 --> 00:00:11,718
Por lo tanto, en JavaScript, un valor falso es un

5
00:00:11,718 --> 00:00:14,210
valor que se considera falso cuando se evala

6
00:00:14,210 --> 00:00:16,878
en una condicin de instruccin if / else.

7
00:00:16,878 --> 00:00:19,114
Y los valores que son falsos en JavaScript son indefinidos,

8
00:00:19,114 --> 00:00:19,947
nulos, cero, cadenas vacas

9
00:00:19,947 --> 00:00:20,780
y valores "no numricos".

10
00:00:25,467 --> 00:00:28,961
Djame que te lo escriba, est bien.

11
00:00:28,961 --> 00:00:30,519
Por lo tanto,

12
00:00:30,519 --> 00:00:31,852
valores falseados, son

13
00:00:33,491 --> 00:00:35,324
indefinidos, nulos, cero,

14
00:00:37,466 --> 00:00:40,729
cadenas vacas, y no un nmero.

15
00:00:40,729 --> 00:00:42,409
No hemos hablado de esto aqu todava,

16
00:00:42,409 --> 00:00:45,191
pero vern ejemplos de esto aqu ms adelante en el curso.

17
00:00:45,191 --> 00:00:47,855
De acuerdo, entonces todos estos cinco valores

18
00:00:47,855 --> 00:00:50,520
diferentes se convertirn a falso cuando se

19
00:00:50,520 --> 00:00:52,758
evalen en una condicin verdadera / falsa.

20
00:00:52,758 --> 00:00:54,940
Entonces es por eso que los llamamos falsy.

21
00:00:54,940 --> 00:00:56,112
No son exactamente

22
00:00:56,112 --> 00:00:58,972
falsos, pero resultarn falsos cuando se evalen en

23
00:00:58,972 --> 00:01:00,654
una condicin if / else.

24
00:01:00,654 --> 00:01:03,321
Ahora tambin tenemos valores verdaderos.

25
00:01:06,413 --> 00:01:08,087
Y, por supuesto, los valores verdaderos

26
00:01:08,087 --> 00:01:10,414
son todos los valores que se consideran verdaderos

27
00:01:10,414 --> 00:01:13,592
cuando se evalan en una condicin de enunciado if / else.

28
00:01:13,592 --> 00:01:18,092
Entonces, bsicamente, son todos los valores que no son falsos.

29
00:01:19,661 --> 00:01:22,007
De acuerdo, entonces veamos un

30
00:01:22,007 --> 00:01:24,590
ejemplo para demostrar cmo funciona esto.

31
00:01:25,461 --> 00:01:28,091
Definamos una variable de altura, digamos.

32
00:01:28,091 --> 00:01:29,823
Y no lo definiremos en realidad,

33
00:01:29,823 --> 00:01:31,351
as que simplemente lo declaramos aqu.

34
00:01:31,351 --> 00:01:34,339
Y ahora vamos a escribir una declaracin if / else.

35
00:01:34,339 --> 00:01:36,339
Entonces podemos decir si es alto,

36
00:01:39,569 --> 00:01:41,902
y luego iniciar sesin en la consola.

37
00:01:45,196 --> 00:01:47,860
La variable est definida. La variable no ha

38
00:01:47,860 --> 00:01:48,777
Y adems. sido definida. Entonces, veamos qu pasa aqu.

39
00:01:54,442 --> 00:01:57,359
Y lo que imprimimos aqu, es que

40
00:02:00,191 --> 00:02:02,967
la variable no ha sido definida.

41
00:02:02,967 --> 00:02:04,590
Entonces, por qu est sucediendo eso?

42
00:02:04,590 --> 00:02:06,902
Bueno, declaramos la variable aqu como

43
00:02:06,902 --> 00:02:08,712
altura, pero no la definimos.

44
00:02:08,712 --> 00:02:11,951
Entonces ya sabes que ahora no est definido.

45
00:02:11,951 --> 00:02:13,577
Y tambin sabemos que undefined es un valor falso, verdad?

46
00:02:13,577 --> 00:02:16,054
As que aqu cuando decimos si

47
00:02:16,054 --> 00:02:20,013
la altura, entonces esta altura aqu se convierte en falso.

48
00:02:20,013 --> 00:02:22,493
Por lo tanto, ingresamos al bloque

49
00:02:22,493 --> 00:02:25,414
else, que luego imprimir que la variable

50
00:02:25,414 --> 00:02:27,620
an no se ha definido.

51
00:02:27,620 --> 00:02:29,573
Esta es una forma muy til de probar

52
00:02:29,573 --> 00:02:31,322
si una variable ha sido definida o no.

53
00:02:31,322 --> 00:02:33,096
Ahora digamos que realmente definimos un valor. Entonces, mira

54
00:02:33,096 --> 00:02:36,734
Entonces, digamos 23. lo que sucede ahora? Por supuesto, la variable ahora est definida.

55
00:02:36,734 --> 00:02:40,240
Eso es porque todo lo que no es un valor falso

56
00:02:40,240 --> 00:02:41,740
es un valor verdadero.

57
00:02:42,640 --> 00:02:45,271
Ya sabemos que cuando existe una variable, entonces

58
00:02:45,271 --> 00:02:48,531
esto aqu se convertir en verdadero y, por lo tanto,

59
00:02:48,531 --> 00:02:49,976
se ingresar el bloque if.

60
00:02:49,976 --> 00:02:53,058
Entonces, de nuevo, es una forma muy til

61
00:02:53,058 --> 00:02:55,900
de probar si realmente existe una variable.

62
00:02:55,900 --> 00:02:58,602
Ahora solo hay una cosa a tener Observe cmo este cero tambin tiene un valor

63
00:02:58,602 --> 00:03:01,532
en cuenta aqu, y eso es todo. falso, pero la altura puede ser, por supuesto, cero.

64
00:03:01,532 --> 00:03:04,856
As que pongamos a cero aqu.

65
00:03:04,856 --> 00:03:06,887
La variable est realmente definida ahora no?

66
00:03:06,887 --> 00:03:09,099
Entonces tenemos un valor aqu, no est indefinido.

67
00:03:09,099 --> 00:03:10,139
Pero si ahora volvemos

68
00:03:10,139 --> 00:03:13,671
a cargar esto, bueno, todava dice que la variable no ha sido definida.

69
00:03:13,671 --> 00:03:15,593
Eso es, por supuesto, una situacin que queremos evitar.

70
00:03:15,593 --> 00:03:16,982
Entonces, esto no solo puede

71
00:03:16,982 --> 00:03:19,623
ser altura, sino que tambin debemos decir que si la

72
00:03:19,623 --> 00:03:21,773
variable es cero, entonces la variable tambin est definida.

73
00:03:21,773 --> 00:03:24,985
Recuerde que podemos usar el operador

74
00:03:24,985 --> 00:03:27,835
o para hacer exactamente eso.

75
00:03:27,835 --> 00:03:31,000
Entonces ya usamos el operador y antes,

76
00:03:31,000 --> 00:03:33,940
pero tambin hablamos sobre el operador o.

77
00:03:33,940 --> 00:03:36,717
Entonces podemos decir,

78
00:03:36,717 --> 00:03:40,024
o la altura

79
00:03:40,024 --> 00:03:42,464
es igual a

80
00:03:42,464 --> 00:03:43,654
cero.

81
00:03:43,654 --> 00:03:45,980
Entonces eso solucionar el problema.

82
00:03:45,980 --> 00:03:48,503
Este es un patrn bastante comn en JavaScript, para verificar si

83
00:03:48,503 --> 00:03:49,422
una variable est definida.

84
00:03:49,422 --> 00:03:50,255
Entonces, verificamos si la

85
00:03:51,198 --> 00:03:52,956
variable existe, o si es igual a cero.

86
00:03:52,956 --> 00:03:54,123
Entonces, el bloque if aqu se ingresa de hecho.

87
00:03:54,972 --> 00:03:56,738
De acuerdo, entonces veamos eso nuevamente,

88
00:03:56,738 --> 00:03:59,585
y entonces ahora vemos que la variable est definida.

89
00:03:59,585 --> 00:04:01,825
Recuerde que solo uno de estos debe ser

90
00:04:01,825 --> 00:04:03,978
verdadero para que la condicin sea verdadera.

91
00:04:03,978 --> 00:04:05,755
Entonces, en este caso, ahora la

92
00:04:05,755 --> 00:04:08,981
altura es cero, por lo que aqu se convertir en falso.

93
00:04:08,981 --> 00:04:10,773
Pero no tenemos altura igual

94
00:04:10,773 --> 00:04:13,770
a cero, lo que es cierto, por supuesto,

95
00:04:13,770 --> 00:04:16,886
porque en esta situacin, la altura es cero.

96
00:04:16,886 --> 00:04:19,896
Entonces tenemos lo falso y lo verdadero,

97
00:04:19,896 --> 00:04:22,703
lo que dar como resultado la verdad.

98
00:04:22,703 --> 00:04:25,701
Por lo tanto, esta lnea de cdigo aqu se ejecuta.

99
00:04:25,701 --> 00:04:28,391
Bien, ahora esto funcionar con cualquier nmero aqu,

100
00:04:28,391 --> 00:04:29,737
y tambin con cadenas.

101
00:04:29,737 --> 00:04:31,878
As que digamos 20, por ejemplo.

102
00:04:31,878 --> 00:04:33,984
Y ves que sigue siendo cierto, porque

103
00:04:33,984 --> 00:04:35,826
todava est ingresado ese primer bloque.

104
00:04:35,826 --> 00:04:38,965
Pero si tenemos una cadena vaca, recuerde que tambin

105
00:04:38,965 --> 00:04:41,727
es un valor falso como vemos aqu.

106
00:04:41,727 --> 00:04:43,560
Entonces, con una cadena vaca, ahora

107
00:04:44,968 --> 00:04:47,385
dice que la variable no se ha definido nuevamente.

108
00:04:49,457 --> 00:04:50,756
Entonces, ese tipo de sentido, no?

109
00:04:50,756 --> 00:04:52,601
Porque, de hecho, no hay nada

110
00:04:52,601 --> 00:04:54,171
all, es como una cadena vaca.

111
00:04:54,171 --> 00:04:56,628
Entonces, estos son valores falsos y

112
00:04:56,628 --> 00:05:00,014
verdaderos, y la forma prctica de verificar si

113
00:05:00,014 --> 00:05:02,037
una variable est realmente definida.

114
00:05:02,037 --> 00:05:04,095
Ahora solo para terminar, hablemos de

115
00:05:04,095 --> 00:05:06,238
los dos operadores de igualdad diferentes.

116
00:05:06,238 --> 00:05:08,041
As que siempre hemos usado este operador triple igual, verdad?

117
00:05:08,041 --> 00:05:11,076
Este es el de las comparaciones estrictas de igualdad.

118
00:05:11,076 --> 00:05:12,707
Pero tambin existe el Y la diferencia es que este

119
00:05:12,707 --> 00:05:15,557
igual, igual, por lo que este operador aqu. tipo escribe coercin, lo que significa que los tipos de datos

120
00:05:15,557 --> 00:05:17,407
de ambas variables no tienen que coincidir.

121
00:05:17,407 --> 00:05:19,565
Djame mostrarte eso, en realidad en la prctica.

122
00:05:19,565 --> 00:05:23,506
Entonces, solo para comentar aqu, y

123
00:05:23,506 --> 00:05:26,495
ahora digamos si la altura Entonces tenemos una

124
00:05:26,495 --> 00:05:28,945
es igual a 23. cadena ahora aqu. Luego simplemente inicie sesin en la no escribe

125
00:05:28,945 --> 00:05:30,745
consola, el operador igual igual. coercin. Vamos a ver qu pas.

126
00:05:30,745 --> 00:05:33,542
Antes de hacer eso, establezcamos esto de nuevo en 23.

127
00:05:33,542 --> 00:05:35,256
Lo que estamos haciendo

128
00:05:35,256 --> 00:05:39,193
aqu, es comparar la altura que es 23, un

129
00:05:39,193 --> 00:05:43,026
nmero con una cadena de 23, con un operador

130
00:05:44,643 --> 00:05:47,315
de igualdad no estricta, que es este.

131
00:05:47,315 --> 00:05:48,148
Entonces solo dos iguales

132
00:05:51,050 --> 00:05:52,050
Echemos un vistazo a esto.

133
00:05:53,265 --> 00:05:55,553
Y entonces ven que esto realmente

134
00:05:55,553 --> 00:05:58,636
es cierto, entonces ingresamos este primer bloque si.

135
00:06:00,537 --> 00:06:02,787
Como ve, el operador igual igual escribe coaccin.

136
00:06:05,360 --> 00:06:07,276
Lo que esto significa es que

137
00:06:07,276 --> 00:06:09,562
JavaScript, cuando usamos este operador aqu, convierte

138
00:06:09,562 --> 00:06:13,047
la cadena de 23 en un nmero, y luego dice que

139
00:06:13,047 --> 00:06:14,511
es igual a 23, el nmero.

140
00:06:14,511 --> 00:06:16,499
Echemos un vistazo a eso aqu de nuevo.

141
00:06:16,499 --> 00:06:19,172
Entonces, 23 y luego la cadena 23.

142
00:06:19,172 --> 00:06:22,920
Y dir que es verdad.

143
00:06:22,920 --> 00:06:25,313
Es exactamente lo que observamos aqu.

144
00:06:25,313 --> 00:06:27,307
As que de nuevo, JavaScript

145
00:06:27,307 --> 00:06:30,831
escribe coercin, lo que bsicamente significa convertir esta

146
00:06:30,831 --> 00:06:33,222
cadena aqu en un nmero,

147
00:06:33,222 --> 00:06:36,851
y luego compara los nmeros, y luego, por

148
00:06:36,851 --> 00:06:38,940
supuesto, son los mismos, no?

149
00:06:38,940 --> 00:06:40,790
Ahora si, en cambio, usamos

150
00:06:40,790 --> 00:06:43,864
el operador estricto de igualdad con los tres

151
00:06:43,864 --> 00:06:47,351
signos iguales, entonces no har coercin de tipo.

152
00:06:47,351 --> 00:06:49,541
Entonces, qu crees que pasar ahora?

153
00:06:49,541 --> 00:06:52,463
S, de hecho, ahora dice que es

154
00:06:52,463 --> 00:06:55,594
falso, porque en realidad son dos cosas diferentes.

155
00:06:55,594 --> 00:06:58,402
Entonces tenemos 23 el nmero y 23 la cadena.

156
00:06:58,402 --> 00:07:00,422
Y son cosas diferentes, as que de hecho,

157
00:07:00,422 --> 00:07:02,209
queremos que no sean lo mismo, est bien.

158
00:07:02,209 --> 00:07:04,192
Y si, en cambio, tuviramos tres iguales

159
00:07:04,192 --> 00:07:06,358
aqu, entonces, por supuesto, no lo veramos operativo.

160
00:07:06,358 --> 00:07:08,718
No veremos este registro en la consola porque es falso.

161
00:07:08,718 --> 00:07:11,358
Bueno, as es como funciona el operador de

162
00:07:11,358 --> 00:07:12,946
igualdad estricta, y es absolutamente

163
00:07:12,946 --> 00:07:15,352
una mejor prctica usar siempre el triple igual,

164
00:07:15,352 --> 00:07:18,249
por lo que el operador de igualdad estricta, a

165
00:07:18,249 --> 00:07:20,532
fin de evitar situaciones inesperadas y errores.

166
00:07:20,532 --> 00:07:23,023
Es por eso que he estado usando este operador todo el

167
00:07:23,023 --> 00:07:25,614
tiempo, con los tres iguales, y no solo con los dos iguales.

168
00:07:25,614 --> 00:07:26,991
&nbsp;

169
00:07:26,991 --> 00:07:30,382
&nbsp;

170
00:07:30,382 --> 00:07:33,749
&nbsp;

171
00:07:33,749 --> 00:07:36,970
&nbsp;

172
00:07:36,970 --> 00:07:40,494
&nbsp;

173
00:07:40,494 --> 00:07:44,782
&nbsp;

174
00:07:44,782 --> 00:07:46,477
&nbsp;

175
00:07:46,477 --> 00:07:48,489
&nbsp;

176
00:07:48,489 --> 00:07:50,421
&nbsp;

177
00:07:50,421 --> 00:07:53,953
&nbsp;

178
00:07:53,953 --> 00:07:56,517
&nbsp;

179
00:07:56,517 --> 00:08:00,850
&nbsp;

